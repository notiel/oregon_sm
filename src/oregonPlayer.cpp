/*****************************************************************************
* Model: oregonPlayer.qm
* File:  ./oregonPlayer.cpp
*
* This code has been generated by QM tool (see state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*****************************************************************************/
/*${.::oregonPlayer.cpp} ...................................................*/
#include "qhsm.h"
#include "oregonPlayer.h"
#include "eventHandlers.h"


#include <stdint.h>

//Q_DEFINE_THIS_FILE


static QState OregonPlayer_initial(OregonPlayer * const me, QEvt const * const e);
static QState OregonPlayer_global(OregonPlayer * const me, QEvt const * const e);
static QState OregonPlayer_active(OregonPlayer * const me, QEvt const * const e);
static QState OregonPlayer_alive(OregonPlayer * const me, QEvt const * const e);
static QState OregonPlayer_immune(OregonPlayer * const me, QEvt const * const e);
static QState OregonPlayer_temp_immune(OregonPlayer * const me, QEvt const * const e);
static QState OregonPlayer_blessed(OregonPlayer * const me, QEvt const * const e);
static QState OregonPlayer_healthy(OregonPlayer * const me, QEvt const * const e);
static QState OregonPlayer_agony(OregonPlayer * const me, QEvt const * const e);
static QState OregonPlayer_ghoul(OregonPlayer * const me, QEvt const * const e);
static QState OregonPlayer_ghoul_good(OregonPlayer * const me, QEvt const * const e);
static QState OregonPlayer_ghoul_healing(OregonPlayer * const me, QEvt const * const e);
static QState OregonPlayer_ghoul_wounded(OregonPlayer * const me, QEvt const * const e);
static QState OregonPlayer_dead(OregonPlayer * const me, QEvt const * const e);
static QState OregonPlayer_test(OregonPlayer * const me, QEvt const * const e);

#ifdef DESKTOP
static QState OregonPlayer_final(OregonPlayer * const me, QEvt const * const e);
#endif /* def DESKTOP */



static OregonPlayer oregonPlayer; /* the only instance of the OregonPlayer class */



/* global-scope definitions -----------------------------------------*/
QHsm * const the_oregonPlayer = (QHsm *) &oregonPlayer; /* the opaque pointer */

int GetCurrentState() {
    if ((void*) the_oregonPlayer->current_ == OregonPlayer_healthy) return HEALTHY;
    if ((void*) the_oregonPlayer->current_ == OregonPlayer_agony) return AGONY;
    if ((void*) the_oregonPlayer->current_ == OregonPlayer_dead) return DEAD;
    if ((void*) the_oregonPlayer->current_ == OregonPlayer_ghoul_good) return GHOUL_GOOD;
    if ((void*) the_oregonPlayer->current_ == OregonPlayer_ghoul_wounded) return GHOUL_WOUNDED;
    if ((void*) the_oregonPlayer->current_ == OregonPlayer_ghoul_healing) return GHOUL_HEALING;
    if ((void*) the_oregonPlayer->current_ == OregonPlayer_blessed) return BLESSED;
    return -1;
}

/*${SMs::OregonPlayer_ctor} ................................................*/
void OregonPlayer_ctor(
    unsigned int HP,
    unsigned int State,
    unsigned int TimerAgony)

{
    OregonPlayer *me = &oregonPlayer;
    me->CharHP = HP;
    me->TimerAgony = TimerAgony;
    me->TimerDeath = 0;
    switch (State) {
           case HEALTHY: {
               me->StartState =(QStateHandler)&OregonPlayer_healthy;
               break;
           }
           case AGONY: {
               me->StartState =
               (QStateHandler)& OregonPlayer_agony;
               break;
           }
           case DEAD: {
               me->StartState =
               (QStateHandler)& OregonPlayer_dead;
               break;

           }
           case GHOUL_GOOD: {
               me->StartState =
               (QStateHandler)& OregonPlayer_ghoul_good;
               break;
           }
           case GHOUL_WOUNDED: {
               me->StartState =
               (QStateHandler)& OregonPlayer_ghoul_wounded;
               break;
           }
           case GHOUL_HEALING: {
               me->StartState =
               (QStateHandler)& OregonPlayer_ghoul_healing;
               break;
           }
           case BLESSED: {
               me->StartState =
               (QStateHandler)& OregonPlayer_blessed;
               break;
           }
           default:
               me->StartState =(QStateHandler)& OregonPlayer_healthy;
       }
     QHsm_ctor(&me->super, Q_STATE_CAST(&OregonPlayer_initial));
}
/*${SMs::OregonPlayer} .....................................................*/
/*${SMs::OregonPlayer::SM} .................................................*/
static QState OregonPlayer_initial(OregonPlayer * const me, QEvt const * const e) {
    /* ${SMs::OregonPlayer::SM::initial} */
    return Q_TRAN(me->StartState);
    return Q_TRAN(&OregonPlayer_healthy);
}
/*${SMs::OregonPlayer::SM::global} .........................................*/
static QState OregonPlayer_global(OregonPlayer * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {

#ifdef DESKTOP
        /* ${SMs::OregonPlayer::SM::global::TERMINATE} */
        case TERMINATE_SIG: {
            status_ = Q_TRAN(&OregonPlayer_final);
            break;
        }
#endif /* def DESKTOP */

        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${SMs::OregonPlayer::SM::global::active} .................................*/
static QState OregonPlayer_active(OregonPlayer * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        case Q_ENTRY_SIG: {
        	printf("Entered player_active\n");
        	status_ = Q_HANDLED();
        	break;
        }
        /* ${SMs::OregonPlayer::SM::global::active::PILL_RESET} */
        case PILL_RESET_SIG: {
            Reset(me);
            status_ = Q_TRAN(&OregonPlayer_healthy);
            break;
        }
        /* ${SMs::OregonPlayer::SM::global::active::PILL_TEST} */
        case PILL_TEST_SIG: {
            status_ = Q_TRAN(&OregonPlayer_test);
            break;
        }
        case Q_EXIT_SIG: {
            printf("Exited player_active\n");
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&OregonPlayer_global);
            break;
        }
    }
    return status_;
}
/*${SMs::OregonPlayer::SM::global::active::alive} ..........................*/
static QState OregonPlayer_alive(OregonPlayer * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        case Q_ENTRY_SIG: {
               printf("Entered player_alive\n");
               status_ = Q_HANDLED();
               break;
           }
        /* ${SMs::OregonPlayer::SM::global::active::alive::PILL_GHOUL} */
        case PILL_GHOUL_SIG: {
            status_ = Q_TRAN(&OregonPlayer_ghoul_good);
            break;
        }
        case Q_EXIT_SIG: {
            printf("Exited player_alive\n");
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&OregonPlayer_active);
            break;
        }
    }
    return status_;
}
/*${SMs::OregonPlayer::SM::global::active::alive::immune} ..................*/
static QState OregonPlayer_immune(OregonPlayer * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        /* ${SMs::OregonPlayer::SM::global::active::alive::immune} */
        case Q_ENTRY_SIG: {
            printf("entered player_immune\n");
        	BeepForPeriod(MEDIUM_BEEP_MS);
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::OregonPlayer::SM::global::active::alive::immune::TIME_TICK_1S} */
        case TIME_TICK_1S_SIG: {
            Flash(255, 0, 0, FLASH_MS);
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::OregonPlayer::SM::global::active::alive::immune::HEAL} */
        case HEAL_SIG: {
            UpdateHP(me, me->CharHP+((oregonPlayerQEvt*)e)->value);
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::OregonPlayer::SM::global::active::alive::immune::AGONY} */
        case AGONY_SIG: {
            status_ = Q_TRAN(&OregonPlayer_agony);
            break;
        }
        case Q_EXIT_SIG: {
            printf("exited player_immune\n");
            status_ = Q_HANDLED();
            break;
        }

        default: {
            status_ = Q_SUPER(&OregonPlayer_alive);
            break;
        }
    }
    return status_;
}
/*${SMs::OregonPlayer::SM::global::active::alive::immune::temp_immune} .....*/
static QState OregonPlayer_temp_immune(OregonPlayer * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        /* ${SMs::OregonPlayer::SM::global::active::alive::immune::temp_immune::NOT_IMMUNE} */
        case Q_ENTRY_SIG: {
            printf("entered player_temp_immune\n");
            status_ = Q_HANDLED();
            break;
        }
        case NOT_IMMUNE_SIG: {
            status_ = Q_TRAN(&OregonPlayer_healthy);
            break;
        }
        case Q_EXIT_SIG: {
            printf("exited player_temp_immune\n");
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&OregonPlayer_immune);
            break;
        }
    }
    return status_;
}
/*${SMs::OregonPlayer::SM::global::active::alive::immune::blessed} .........*/
static QState OregonPlayer_blessed(OregonPlayer * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        /* ${SMs::OregonPlayer::SM::global::active::alive::immune::blessed} */
        case Q_ENTRY_SIG: {
        	printf("Entered player_blessed\n");
            SaveState(BLESSED);
            status_ = Q_HANDLED();
            break;
        }
        case Q_EXIT_SIG: {
            printf("Exited player_blessed\n");
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&OregonPlayer_immune);
            break;
        }
    }
    return status_;
}
/*${SMs::OregonPlayer::SM::global::active::alive::healthy} .................*/
static QState OregonPlayer_healthy(OregonPlayer * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        /* ${SMs::OregonPlayer::SM::global::active::alive::healthy} */
        case Q_ENTRY_SIG: {
            printf("Entered healthy\n");
        	SaveState(HEALTHY);
            BeepForPeriod(MEDIUM_BEEP_MS);
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::OregonPlayer::SM::global::active::alive::healthy::TIME_TICK_1S} */
        case TIME_TICK_1S_SIG: {
            //ShowCurrentHealth(me);
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::OregonPlayer::SM::global::active::alive::healthy::HEAL} */
        case HEAL_SIG: {
            UpdateHP(me, me->CharHP+((oregonPlayerQEvt*)e)->value);
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::OregonPlayer::SM::global::active::alive::healthy::RAD_RCVD} */
        case RAD_RCVD_SIG: {
            /* ${SMs::OregonPlayer::SM::global::active::alive::healthy::RAD_RCVD::[e->value>=me>CharHP]} */
            if (((oregonPlayerQEvt*)e)->value >= me->CharHP) {
                status_ = Q_TRAN(&OregonPlayer_agony);
            }
            /* ${SMs::OregonPlayer::SM::global::active::alive::healthy::RAD_RCVD::[else]} */
            else {
                UpdateHP(me, me->CharHP -((oregonPlayerQEvt*)e)->value);
                status_ = Q_HANDLED();
            }
            break;
        }
        /* ${SMs::OregonPlayer::SM::global::active::alive::healthy::AGONY} */
        case AGONY_SIG: {
            status_ = Q_TRAN(&OregonPlayer_agony);
            break;
        }
        /* ${SMs::OregonPlayer::SM::global::active::alive::healthy::IMMUNE} */
        case IMMUNE_SIG: {
            status_ = Q_TRAN(&OregonPlayer_temp_immune);
            break;
        }
        case Q_EXIT_SIG: {
             printf("Exited player_healthy\n");
             status_ = Q_HANDLED();
             break;
        }
        default: {
            status_ = Q_SUPER(&OregonPlayer_alive);
            break;
        }
    }
    return status_;
}
/*${SMs::OregonPlayer::SM::global::active::alive::agony} ...................*/
static QState OregonPlayer_agony(OregonPlayer * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        /* ${SMs::OregonPlayer::SM::global::active::alive::agony} */
        case Q_ENTRY_SIG: {
        	printf("Entered player_agony\n");
            BeepForPeriod(LONG_BEEP_MS);
            SaveState(AGONY);
            UpdateHP(me, 1);
            me->TimerAgony = 0;
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::OregonPlayer::SM::global::active::alive::agony::TIME_TICK_10S} */
        case TIME_TICK_10S_SIG: {
            BeepForPeriod(SHORT_BEEP_MS);
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::OregonPlayer::SM::global::active::alive::agony::TIME_TICK_1S} */
        case TIME_TICK_1S_SIG: {
            /* ${SMs::OregonPlayer::SM::global::active::alive::agony::TIME_TICK_1S::[me->TimerAgony>TIMEOUT_AGONY]} */
            if (me->TimerAgony > TIMEOUT_AGONY_S) {
                status_ = Q_TRAN(&OregonPlayer_dead);
            }
            /* ${SMs::OregonPlayer::SM::global::active::alive::agony::TIME_TICK_1S::[else]} */
            else {
                me->TimerAgony++;
                printf("Timer Agony: %u", me->TimerAgony);
                Flash(255, 0, 0, FLASH_MS);
                status_ = Q_HANDLED();
            }
            break;
        }
        /* ${SMs::OregonPlayer::SM::global::active::alive::agony::BLESSED} */
        case BLESSED_SIG: {
            status_ = Q_TRAN(&OregonPlayer_blessed);
            break;
        }
        /* ${SMs::OregonPlayer::SM::global::active::alive::agony::HEAL} */
        case HEAL_SIG: {
            UpdateHP(me, me->CharHP + ((oregonPlayerQEvt*)e)->value);
            status_ = Q_TRAN(&OregonPlayer_healthy);
            break;
        }
        case Q_EXIT_SIG: {
            printf("Exited player_agony\n");
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&OregonPlayer_alive);
            break;
        }
    }
    return status_;
}
/*${SMs::OregonPlayer::SM::global::active::ghoul} ..........................*/
static QState OregonPlayer_ghoul(OregonPlayer * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        case Q_ENTRY_SIG: {
            printf("Entered player_ghoul\n");
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::OregonPlayer::SM::global::active::ghoul::TIME_TICK_1S} */
        case TIME_TICK_1S_SIG: {
            ShowCurrentHealthGhoul(me);
            status_ = Q_HANDLED();
            break;
        }
        case Q_EXIT_SIG: {
            printf("Exited player_ghoul\n");
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&OregonPlayer_active);
            break;
        }
    }
    return status_;
}
/*${SMs::OregonPlayer::SM::global::active::ghoul::good} ....................*/
static QState OregonPlayer_ghoul_good(OregonPlayer * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        /* ${SMs::OregonPlayer::SM::global::active::ghoul::good} */
        case Q_ENTRY_SIG: {
            printf("Entered ghoul_good\n");
        	SaveState(GHOUL_GOOD);
            BeepForPeriod(MEDIUM_BEEP_MS);
            UpdateHP(me, GHOUL_HP);
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::OregonPlayer::SM::global::active::ghoul::good::PILL_REMOVED} */
        case PILL_GHOUL_REMOVED_SIG: {
            status_ = Q_TRAN(&OregonPlayer_ghoul_wounded);
            break;
        }
        case Q_EXIT_SIG: {
            printf("Exited player_ghoul_good\n");
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&OregonPlayer_ghoul);
            break;
        }
    }
    return status_;
}
/*${SMs::OregonPlayer::SM::global::active::ghoul::healing} .................*/
static QState OregonPlayer_ghoul_healing(OregonPlayer * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        /* ${SMs::OregonPlayer::SM::global::active::ghoul::healing} */
        case Q_ENTRY_SIG: {
        	printf("Entered ghoul healing\n");
            SaveState(GHOUL_HEALING);
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::OregonPlayer::SM::global::active::ghoul::healing::RAD_RCVD} */
        case RAD_RCVD_SIG: {
            /* ${SMs::OregonPlayer::SM::global::active::ghoul::healing::RAD_RCVD::[]else]} */
            if (((oregonPlayerQEvt*)e)->value + me->CharHP < GHOUL_HP) {
                UpdateHP(me, me->CharHP + ((oregonPlayerQEvt*)e)->value);
            	status_ = Q_HANDLED();
            }
            else {
            	status_ = Q_TRAN(&OregonPlayer_ghoul_good);
            }
            break;
        }
        case Q_EXIT_SIG: {
            printf("Exited ghoul_healing\n");
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&OregonPlayer_ghoul);
            break;
        }
    }
    return status_;
}

/*${SMs::OregonPlayer::SM::global::active::ghoul::wounded} .................*/
static QState OregonPlayer_ghoul_wounded(OregonPlayer * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        /* ${SMs::OregonPlayer::SM::global::active::ghoul::wounded} */
        case Q_ENTRY_SIG: {
        	printf("Entered ghoul_wounded\n");
            SaveState(GHOUL_WOUNDED);
            UpdateHP(me, 1);
            BeepForPeriod(LONG_BEEP_MS);
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::OregonPlayer::SM::global::active::ghoul::wounded::TIME_TICK_10S} */
        case TIME_TICK_10S_SIG: {
            BeepForPeriod(SHORT_BEEP_MS);
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::OregonPlayer::SM::global::active::ghoul::wounded::RAD_RCVD} */
        case RAD_RCVD_SIG: {
            UpdateHP(me, (me->CharHP) + ((oregonPlayerQEvt*)e)->value);
            status_ = Q_TRAN(&OregonPlayer_ghoul_healing);
            break;
        }
        case Q_EXIT_SIG: {
            printf("Exited ghoul_wounded\n");
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&OregonPlayer_ghoul);
            break;
        }
    }
    return status_;
}
/*${SMs::OregonPlayer::SM::global::active::dead} ...........................*/
static QState OregonPlayer_dead(OregonPlayer * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        /* ${SMs::OregonPlayer::SM::global::active::dead} */
        case Q_ENTRY_SIG: {
            printf("entered player_dead\n");
        	SaveState(DEAD);
            BeepForPeriod(LONG_BEEP_MS);
            UpdateHP(me, 0);
            Flash(255, 0, 0, FLASH_1M);
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::OregonPlayer::SM::global::active::dead::TIME_TICK_1M} */
        case TIME_TICK_1M_SIG: {
            BeepForPeriod(SHORT_BEEP_MS);
            Flash(255, 0, 0, FLASH_1M);
            status_ = Q_HANDLED();
            break;
        }
        case Q_EXIT_SIG: {
            printf("Exited player_dead\n");
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&OregonPlayer_active);
            break;
        }
    }
    return status_;
}
/*${SMs::OregonPlayer::SM::global::test} ...................................*/
static QState OregonPlayer_test(OregonPlayer * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        /* ${SMs::OregonPlayer::SM::global::test} */
        case Q_ENTRY_SIG: {
            printf("Entered player_test\n");
        	BeepForPeriod(SHORT_BEEP_MS);
            Flash(127, 0, 0, FLASH_MS);
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::OregonPlayer::SM::global::test::RAD_RCVD} */
        case RAD_RCVD_SIG: {
            BeepForPeriod(SHORT_BEEP_MS);
            Flash(127, 0, 0, FLASH_MS);
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::OregonPlayer::SM::global::test::PILL_GHOUL} */
        case PILL_GHOUL_SIG: {
            status_ = Q_TRAN(&OregonPlayer_ghoul_good);
            break;
        }
        /* ${SMs::OregonPlayer::SM::global::test::PILL_RESET} */
        case PILL_RESET_SIG: {
            Reset(me);
            status_ = Q_TRAN(&OregonPlayer_healthy);
            break;
        }
        case Q_EXIT_SIG: {
            printf("Exited player_test\n");
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&OregonPlayer_global);
            break;
        }
    }
    return status_;
}

#ifdef DESKTOP
/*${SMs::OregonPlayer::SM::final} ..........................................*/
static QState OregonPlayer_final(OregonPlayer * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        /* ${SMs::OregonPlayer::SM::final} */
        case Q_ENTRY_SIG: {
            printf("Bye! Bye!");
            exit(0);
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
#endif /* def DESKTOP */




/*tranlated from diagrams code*/

